
* TOC                                                                   :TOC_5_gh:
- [[#installation][Installation]]
- [[#usage][Usage]]
  - [[#setup][Setup]]
    - [[#select-a-host-to-run-the-code][Select a host to run the code]]
    - [[#prepare-to-run-witch-for-the-first-time][Prepare to run WITCH for the first time]]
  - [[#witch][WITCH]]
    - [[#generate-data-folder][Generate data folder]]
    - [[#calibrate][Calibrate]]
    - [[#run-witch-non-interactively][Run witch non-interactively]]
    - [[#check-non-interactive-witch-runs][Check non-interactive WITCH runs]]
    - [[#run-with-starting-point][Run with starting point]]
    - [[#run-with-double-dash-parameters][Run with double-dash parameters]]
    - [[#calibrate-in-a-local-folder][Calibrate in a local folder]]
  - [[#sync][Sync]]
    - [[#download-a-remote-folder][Download a remote folder]]
    - [[#upload-a-local-folder][Upload a local folder]]
  - [[#post-process][Post-process]]
    - [[#show-double-dash-parameters-of-a-past-run][Show double-dash parameters of a past run]]
    - [[#run-database-on-a-past-run-results][Run database on a past run results]]
  - [[#misc][Misc]]
    - [[#run-a-command-via-ssh][Run a command via ssh]]

* Installation
All commands below are to be run on your local computer. If you use Windows, make sure you work in a BASH shell prompt, e.g. via the [[https://docs.microsoft.com/en-us/windows/wsl/install-win10][Windows Subsystem for Linux]].

1. Clone this repo, e.g. in =~/dotfiles/wbash=
   #+begin_src sh
     cd ~/dotfiles
     git clone git@github.com:witch-team/wbash.git
   #+end_src
2. Source =wbash.sh= in your =~/.bashrc=
   #+begin_src sh
     echo 'source ~/dotfiles/wbash/wbash.sh' >> ~/.bashrc
   #+end_src
   Open a new shell to make the new commands available.
3. Follow the setup wizard:
   #+begin_src sh
     wsetup-wizard
   #+end_src

* Usage

** Setup

*** Select a host to run the code
#+begin_src sh
export WHOST=zeus
export WHOST=athena
export WHOST=local
#+end_src
3 hosts are supported: =zeus= and =athena= will run the code on the respective supercomputer. =local= will run code locally on your computer. You can change the default (currently =zeus=) at the beginning of =wbash.sh=.

The directory used on WHOST depends on
1) WHOST
2) your current local directory name (WD)
3) the git branch you are in (BRANCH)
as follows:
| WHOST       | WD           | BRANCH         | work dir on WHOST         |
|-------------+--------------+----------------+---------------------------|
| local       |              |                | current dir               |
| athena/zeus | witch-BRANCH |                | WHOST:~/work/witch-BRANCH |
|             | witch-master |                | WHOST:~/work/witch        |
|             | witch        | BRANCH==master | WHOST:~/work/witch        |
|             | witch        | BRANCH!=master | WHOST:~/work/witch-BRANCH |


*** Prepare to run WITCH for the first time
#+begin_src sh
git clone git@github.com:witch-team/witch.git
cd witch
wsetup
#+end_src
This will:
- clone =../witch-data= if it does not exist, pull it, then sync it to WHOST
- clone =../witchtools= if it does not exist, pull it, then sync it to WHOST
- pull current dir, then sync it to WHOST
- run =tools/R/setup.R= on WHOST, which will install basic R dependencies

** WITCH

*** Generate data folder
To generate =data_witch17=:
#+begin_src sh
wdata -i
#+end_src
This will:
- sync =../witch-data= and =./= to host
- run =translate_witch_data.R= interactively (drop =-i= to launch a job non-interactively)
- download the resulting =data_witch17= folder (needs to be done manually if non-interactive).
Use =-r xxx= to use regional setup =xxx=.

*** Calibrate
#+begin_src sh
  wrun -j calib -i -c
#+end_src
This will:
- sync =../witch-data= and =./= to host
- submit a job on WHOST named =calib= that runs =gams run_witch.gms= set up for calibration
- at the end download =data_witch17= and a =calib= folder with these contents:
  #+begin_example
    calib
    ├── calib.err
    ├── calib.lst
    ├── calib.out
    ├── errors_calib.txt
    └── results_calib.gdx
  #+end_example

File names follow the job name (i.e. the one specified after =-j=).

*** Run witch non-interactively
Drop the =-i= after =wrun= (this won't affect local runs).

*** Check non-interactive WITCH runs 
To list all running jobs:
#+begin_src sh
wcheck
#+end_src

To attach to the console output of a running job named =bau=:
#+begin_src sh
wcheck bau
#+end_src

To check the =errors_*.txt= file of job =bau=:
#+begin_src sh
werr bau
#+end_src

*** Run with starting point
To run a bau using =calib/results_calib.gdx= as starting gdx:
#+begin_src sh
wrun -j bau -s calib
#+end_src
Notice that it's enough to specify =calib=. This will be translated into =calib/results_calib=. You can also specify a local gdx file after =-s=. If so, this will be moved to the current folder, synced to host, and used as a startgdx. The same mechanism holds for:
- -f :: for gdxfix
- -b :: for baugdx

Add =-S= for =startboost=.

*** Run with double-dash parameters
To pass double-dash parameters to gams, just specify them at the end:
#+begin_src sh
wrun -j wb600 --policy=innopaths --scen=wb600
#+end_src

*** Calibrate in a local folder
#+begin_src sh
wrun -j calib_xxx -C
#+end_src
Notice the upper-case =-C= instead of =-c=. To later use this calibration in a =bau= for example, run:
#+begin_src sh
wrun -j bau_xxx -i -u calib_xxx
#+end_src
This will also set start and bau gdx to =calib_xxx/results_calib_xxx=.

** Sync

*** Download a remote folder
To download the remote folder =xxx= from the remost working dir, use:
#+begin_src sh
wdown xxx
#+end_src
Use =wdown -a xxx= to download also the =all_data_temp*.gdx=.

*** Upload a local folder
To upload the local folder =yyy=, use:
#+begin_src sh
wup yyy
#+end_src
By default:
- w/o arguments the current dir is uploaded;
- only versioned files are uploaded; to include non-git files, use =-a= before =yyy=;
- target folder name on WHOST is the same, to use a different name, e.g. =zzz=, use =-t zzz= before =yyy=.

** Post-process

*** Show double-dash parameters of a past run
If the run was named =bau=, use:
#+begin_src sh
wshow bau
#+end_src

*** Run database on a past run results
If the run was named =ctax=, use:
#+begin_src sh
wdb ctax
#+end_src
After running the command above, the =ctax/= local folder will be updated with the generated db files. Use =-o= switch to specify a gdx out db name, and =-b= to specify a bau gdx different than =bau/results_bau=.

** Misc

*** Run a command via ssh
To run a command, e.g. =ls -clt=, in WHOST working dir, use:
#+begin_src sh
wssh ls -clt
#+end_src
